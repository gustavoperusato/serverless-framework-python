service: sls-package-python

provider:
  name: aws
  runtime: python3.8  ## Alterado de node para python
  #profile: hackathon
  region: us-east-1
  stage: dev
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iam: ## Atualizado permissões conforme padrão mais recente
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - Effect: Allow  ## Adicionado permissão para acesso ao s3 para a função extractMetadata()
          Action:
            - s3:GetObject
            - s3:ListBucket
          Resource: "arn:aws:s3:::${self:functions.extractMetadata.events.0.s3.bucket}/*"

functions:
  extractMetadata:
    handler: handler.extractMetadata
    description: This function extracts the metadata from images bucket ## Adicionado descrição
    memorySize: 128
    timeout: 30
    events:
      - s3:
          bucket: store-imgs-gp
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/  ## (Opcional) Retirado "suffix: .jpg" para suportar outros formatos de img 

  getMetadata:
    handler: handler.getMetadata
    description: This function gets metadata from the dynamodb table
    memorySize: 128 ## Adicionado descrição
    timeout: 30
    events:
      - http:
          path: images/{s3objectkey}
          method: get
          cors: true

resources:
  Resources:
    ImagesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: s3objectkey
            AttributeType: S
        KeySchema:
          -
            AttributeName: s3objectkey
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

plugins:
  - serverless-python-requirements
  ## Adicionado plugin para empacotar libs necessárias ao código Python
  ## Esta linha de código é adicionada automaticamente ao executar o comando de
  ## instalação do plugin

custom:
  pythonRequirements:
    dockerizePip: non-linux
     ## Adicionado parâmetro para o plugin relatado acima

package:
  exclude:
    - node_modules/**
    - venv/**
    ## Adicionado parametro para não subir os pacotes Node, evitando extrapolar o limite do deploy
